---
- name: Include configuration variables from defaults file
  include_vars:
    file: "{{ role_path }}/files/config.yaml"
    name: kraken_config_defaults

- name: Include configuration variables
  include_vars:
    file: "{{ config_file }}"
    name: kraken_config_user
  when: config_file | is_file

- name: expand default configuration and register the config fact
  set_fact:
    kraken_config: "{{ kraken_config_defaults.deployment | expand_config }}"
  when: not config_file | is_file

- name: Non-recursively combine defaults and user config expand configuration and register the config fact
  set_fact:
    kraken_config: "{{ kraken_config_defaults.deployment | combine(kraken_config_user.deployment) | expand_config }}"
  when: config_file | is_file

- name: Verify cluster is defined
  fail:
    msg: "Make sure that the 'cluster' is defined in {{ config_file }}"
  when: kraken_config.cluster | is_empty

- name: Ensure each nodePool corresponds to exactly one of the node roles (i.e. etcd, master, or node)
  fail:
    msg: "({{ i.0.name }}, {{ i.1.name }}) corresponds to more than one node role"
  with_subelements:
    - "{{ kraken_config.clusters }}"
    - nodePools
  loop_control:
    loop_var: i
  when: (i.1.etcdConfig is defined and (i.1.apiServerConfig is defined or i.1.kubeConfig is defined))
         or (i.1.apiServerConfig is defined and i.1.kubeConfig is undefined)
         or (i.1.etcdConfig is undefined and i.1.kubeConfig is undefined)

- name: Set kubernetes minor versions for each aws or gke cluster
  set_fact:
    kubernetes_minor_versions: "{{ kubernetes_minor_versions| default({}) |combine
      (
        { item.0.name: masterVersion[0:(masterVersion.find('.', 3 ))] }
      )
    }}"
  with_subelements:
    - "{{ kraken_config.clusters }}"
    - nodePools
  when: (item.1.apiServerConfig is defined) or (item.0.providerConfig.provider == 'gke')
  vars:
    masterVersion: "{{ item.1.kubeConfig.version }}"

- include: setup.yaml
  with_subelements:
    - "{{ kraken_config.clusters }}"
    - nodePools
  loop_control:
    loop_var: cluster_node_tuple

- include: set-oidc-info.yaml
  with_items:
    - "{{ kraken_config.clusters }}"
  loop_control:
    loop_var: a_cluster
  when: "a_cluster.kubeAuth.authn.oidc is defined"
